AWSTemplateFormatVersion: '2010-09-09'
Description: Online Ledger Infrastructure Stack

Parameters:

  Stage:
    Description: Application deployment stage.
    Type: String
    Default: LOCAL
    AllowedValues:
    - PROD
    - TEST
    - LOCAL

  DeploymentVersion:
    Description: API deployment version
    Type: String
    Default: v1

  Region:
    Description: AWS region
    Type: String
    Default: us-east-1
    AllowedValues:
    - us-east-1
    - us-east-2
    - eu-west-1
    - eu-west-2

  S3EndPointURL:
    Description: Endpoint S3
    Type: String
    Default: http://localhost:4572

  ApiGatewayEndPointURL:
    Description: Endpoint API Gateway
    Type: String
    Default: http://localhost:4567

Resources:
  LedgerBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: Ledger
      VersioningConfiguration:
        Status: Disabled

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:*
            Resource: arn:aws:logs:*:*:*

  LedgerFunc:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: "Ledger"
      Handler: "ledger.handler"
      Environment:
        Variables:
          AWS_ACCESS_KEY_ID: ""
          AWS_SECRET_ACCESS_KEY: ""
          AWS_REGION: !Ref Region
          S3_ENDPOINT_URL: !Ref S3EndPointURL
          BUCKET_NAME: Ledger
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: "__local__"
        S3Key: "/opt/lambda"
      Runtime: "python3.8"
      Timeout: 25
      TracingConfig:
        Mode: "Active"

  LedgerRestApi:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Description: Handling Ledger Entries
      Name: "LedgerRestApi"

  UserModel:
    Type: AWS::ApiGateway::Model
    Properties:
      ContentType: application/json
      Name: User
      RestApiId: !Ref LedgerRestApi
      Schema:
        "$schema": http://json-schema.org/draft-04/schema#
        title: User
        type: object
        additionalProperties: false
        properties:
          uid:
            type: string
          email:
            type: string
          phone:
            type: string
        required:
        - uid
        - email
        - phone
  UsersModel:
    Type: AWS::ApiGateway::Model
    Properties:
      ContentType: application/json
      Name: Users
      RestApiId: !Ref LedgerRestApi
      Schema:
        "$schema": http://json-schema.org/draft-04/schema#
        title: Users
        type: array
        items:
          "$ref": !Join [ "/", [!Ref ApiGatewayEndPointURL, "restapis", !Ref LedgerRestApi, "models", !Ref UserModel]]
  CreateUserModel:
    Type: AWS::ApiGateway::Model
    Properties:
      ContentType: application/json
      Name: CreateUser
      RestApiId: !Ref LedgerRestApi
      Schema:
        "$schema": http://json-schema.org/draft-04/schema#
        title: CreateUser
        type: object
        additionalProperties: false
        properties:
          email:
            type: string
          phone:
            type: string
        required:
        - email
        - phone
  TaskModel:
    Type: AWS::ApiGateway::Model
    Properties:
      ContentType: application/json
      Name: Task
      RestApiId: !Ref LedgerRestApi
      Schema:
        "$schema": http://json-schema.org/draft-04/schema#
        title: Task
        type: object
        additionalProperties: false
        properties:
          tid:
            type: integer
          description:
            type: string
          created:
            type: integer
          due:
            type: integer
          category:
            type: string
          completed:
            type: integer
        required:
        - tid
        - description
        - created
  TasksModel:
    Type: AWS::ApiGateway::Model
    Properties:
      ContentType: application/json
      Name: Tasks
      RestApiId: !Ref LedgerRestApi
      Schema:
        "$schema": http://json-schema.org/draft-04/schema#
        title: Tasks
        type: array
        items:
          "$ref": !Join [ "/", [!Ref ApiGatewayEndPointURL, "restapis", !Ref LedgerRestApi, "models", !Ref TaskModel]]
  CreateTaskModel:
    Type: AWS::ApiGateway::Model
    Properties:
      ContentType: application/json
      Name: CreateTask
      RestApiId: !Ref LedgerRestApi
      Schema:
        "$schema": http://json-schema.org/draft-04/schema#
        title: CreateTask
        type: object
        properties:
          description:
            type: string
          due:
            type: integer
          category:
            type: string
        required:
        - description
  UsersResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref LedgerRestApi
      ParentId: !GetAtt LedgerRestApi.RootResourceId
      PathPart: user
  UserResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref LedgerRestApi
      ParentId: !Ref UsersResource
      PathPart: "{userId}"
  UserTasksResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref LedgerRestApi
      ParentId: !Ref UserResource
      PathPart: task
  UserTaskResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref LedgerRestApi
      ParentId: !Ref UserTasksResource
      PathPart: "{taskId}"
  CategoriesResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref LedgerRestApi
      ParentId: !GetAtt LedgerRestApi.RootResourceId
      PathPart: category
  CategoryResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref LedgerRestApi
      ParentId: !Ref CategoriesResource
      PathPart: "{category}"
  CategoryTasksResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref LedgerRestApi
      ParentId: !Ref CategoryResource
      PathPart: task

  UserPost:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref LedgerRestApi
      ResourceId: !Ref UserResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join [ "", ['arn:aws:apigateway:', !Ref AWS::Region, ":lambda:path/2015-03-31/functions/", !GetAtt LedgerFunc.Arn, "/invocations"] ]
        IntegrationResponses:
          -
            StatusCode: 201
  UserGet:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref LedgerRestApi
      ResourceId: !Ref UserResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join [ "", ['arn:aws:apigateway:', !Ref AWS::Region, ":lambda:path/2015-03-31/functions/", !GetAtt LedgerFunc.Arn, "/invocations"] ]
        IntegrationResponses:
          -
            StatusCode: 200
  UserDelete:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref LedgerRestApi
      ResourceId: !Ref UserResource
      HttpMethod: DELETE
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join [ "", ['arn:aws:apigateway:', !Ref AWS::Region, ":lambda:path/2015-03-31/functions/", !GetAtt LedgerFunc.Arn, "/invocations"] ]
        IntegrationResponses:
          -
            StatusCode: 204
  UsersGet:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref LedgerRestApi
      ResourceId: !Ref UsersResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join [ "", ['arn:aws:apigateway:', !Ref AWS::Region, ":lambda:path/2015-03-31/functions/", !GetAtt LedgerFunc.Arn, "/invocations"] ]
        IntegrationResponses:
          -
            StatusCode: 200
  UsersPost:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref LedgerRestApi
      ResourceId: !Ref UsersResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join [ "", ['arn:aws:apigateway:', !Ref AWS::Region, ":lambda:path/2015-03-31/functions/", !GetAtt LedgerFunc.Arn, "/invocations"] ]
        IntegrationResponses:
          -
            StatusCode: 201
  UserTasksGet:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref LedgerRestApi
      ResourceId: !Ref UserTasksResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join [ "", ['arn:aws:apigateway:', !Ref AWS::Region, ":lambda:path/2015-03-31/functions/", !GetAtt LedgerFunc.Arn, "/invocations"] ]
        IntegrationResponses:
          -
            StatusCode: 200
  UserTasksPost:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref LedgerRestApi
      ResourceId: !Ref UserTasksResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join [ "", ['arn:aws:apigateway:', !Ref AWS::Region, ":lambda:path/2015-03-31/functions/", !GetAtt LedgerFunc.Arn, "/invocations"] ]
        IntegrationResponses:
          -
            StatusCode: 201
  UserTaskPut:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref LedgerRestApi
      ResourceId: !Ref UserTaskResource
      HttpMethod: PUT
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join [ "", ['arn:aws:apigateway:', !Ref AWS::Region, ":lambda:path/2015-03-31/functions/", !GetAtt LedgerFunc.Arn, "/invocations"] ]
        IntegrationResponses:
        - StatusCode: 204
  UserTaskDelete:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref LedgerRestApi
      ResourceId: !Ref UserTaskResource
      HttpMethod: DELETE
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join [ "", ['arn:aws:apigateway:', !Ref AWS::Region, ":lambda:path/2015-03-31/functions/", !GetAtt LedgerFunc.Arn, "/invocations"] ]
        IntegrationResponses:
        - StatusCode: 204
  CategoryTasksGet:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref LedgerRestApi
      ResourceId: !Ref CategoryTasksResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join [ "", ['arn:aws:apigateway:', !Ref AWS::Region, ":lambda:path/2015-03-31/functions/", !GetAtt LedgerFunc.Arn, "/invocations"] ]
        IntegrationResponses:
          -
            StatusCode: 200
  LedgerRestApiDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref LedgerRestApi
      StageName: !Ref DeploymentVersion
    DependsOn:
    - UsersGet
    - UsersPost
    - UserGet
    - UserDelete
    - UserTasksGet
    - UserTasksPost
    - UserTaskPut
    - UserTaskDelete
    - CategoryTasksGet

Outputs:
  ApiId:
    Value: !Ref LedgerRestApi

  UserApi:
    Value: !Join ["/", [!Ref ApiGatewayEndPointURL, "restapis", !Ref LedgerRestApi, !Ref DeploymentVersion, "_user_request_", "user"] ]
